blueprint:
  name: "HASP p[10].b[all] Page 10 displays TV/media controls"
  description: |

    # Description

    Page 10 controls a selected media player, power, volume control and input

    ![Preview](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/hasp_Display_Media_Control_page10.png)

    ## HASP Page and Button reference

    <details>

    This automation is designed to work with the media controls found on page 8:

    | Page 10 |
    |--------|
    | ![Page 10](https://raw.githubusercontent.com/HASwitchPlate/HASPone/main/images/NextionUI_p10_5buttons+1slider.png) |


    </details>

  domain: automation
  input:
    haspdevice:
      name: "HASP Device"
      description: "Select the HASP device"
      selector:
        device:
          integration: mqtt
          manufacturer: "HASwitchPlate"
          model: "HASPone v1.0.0"
    hasppage:
      name: "HASP Page"
      description: "Select the HASP page (1-11) for the controls. Refer to the HASP Page and Button reference above."
      default: 10
      selector:
        number:
          min: 1
          max: 11
          mode: slider
          unit_of_measurement: page
    mediaplayer:
      name: "Media Player to control"
      description: "Select a media player to control"
      selector:
        entity:
          domain: media_player
mode: parallel
max_exceeded: silent

variables:
  haspname: >-
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^sensor\.") -%}
        {{- entity|regex_replace(find="^sensor\.", replace="", ignorecase=true)|regex_replace(find="_sensor(?:_\d+|)$", replace="", ignorecase=true) -}}
      {%- endif -%}
    {%- endfor -%}
  haspsensor: >-
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^sensor\..+_sensor(?:_\d+|)$") -%}
        {{ entity }}
      {%- endif -%}
    {%- endfor -%}
  hasppage: !input hasppage
  mediaplayer: !input mediaplayer
  commandtopic: '{{ "hasp/" ~ haspname ~ "/command/" }}'
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  jsoncommandtopic: '{{ "hasp/" ~ haspname ~ "/command/json" }}'
  selectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb" }}'
  unselectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb" }}'
  selectedfg: >-
    {%- set color = namespace() -%}
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^light\..*_selected_foreground_color(?:_\d+|)$") -%}
        {%- set color.source=entity -%}
      {%- endif -%}
    {%- endfor -%}
    {%- set brightness = state_attr(color.source, "brightness")|int / 255 -%}
    {%- set red=(state_attr(color.source, "rgb_color")[0] * brightness)|int -%}
    {%- set green=(state_attr(color.source, "rgb_color")[1] * brightness)|int -%}
    {%- set blue=(state_attr(color.source, "rgb_color")[2] * brightness)|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  selectedbg: >-
    {%- set color = namespace() -%}
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^light\..*_selected_background_color(?:_\d+|)$") -%}
        {%- set color.source=entity -%}
      {%- endif -%}
    {%- endfor -%}
    {%- set brightness = state_attr(color.source, "brightness")|int / 255 -%}
    {%- set red=(state_attr(color.source, "rgb_color")[0] * brightness)|int -%}
    {%- set green=(state_attr(color.source, "rgb_color")[1] * brightness)|int -%}
    {%- set blue=(state_attr(color.source, "rgb_color")[2] * brightness)|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  unselectedfg: >-
    {%- set color = namespace() -%}
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^light\..*_unselected_foreground_color(?:_\d+|)$") -%}
        {%- set color.source=entity -%}
      {%- endif -%}
    {%- endfor -%}
    {%- set brightness = state_attr(color.source, "brightness")|int / 255 -%}
    {%- set red=(state_attr(color.source, "rgb_color")[0] * brightness)|int -%}
    {%- set green=(state_attr(color.source, "rgb_color")[1] * brightness)|int -%}
    {%- set blue=(state_attr(color.source, "rgb_color")[2] * brightness)|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}
  unselectedbg: >-
    {%- set color = namespace() -%}
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^light\..*_unselected_background_color(?:_\d+|)$") -%}
        {%- set color.source=entity -%}
      {%- endif -%}
    {%- endfor -%}
    {%- set brightness = state_attr(color.source, "brightness")|int / 255 -%}
    {%- set red=(state_attr(color.source, "rgb_color")[0] * brightness)|int -%}
    {%- set green=(state_attr(color.source, "rgb_color")[1] * brightness)|int -%}
    {%- set blue=(state_attr(color.source, "rgb_color")[2] * brightness)|int -%}
    {{ (red|bitwise_and(248)*256) + (green|bitwise_and(252)*8) + (blue|bitwise_and(248)/8)|int }}

  volume: "{% if state_attr(mediaplayer, 'volume_level')|lower == 'none' %}0{% else %}{{(state_attr(mediaplayer, 'volume_level')*100)|int}}{% endif %}"
  button5text: ' ' # Up speaker
  button6text: 'kodi'
  button7text: '{{volume}}'
  button8text: ''
  button9text: ' ' # Down speaker
  button10text: ''
  b5obj: '{{ "p[" ~ hasppage ~ "].b[5]" }}'
  b6obj: '{{ "p[" ~ hasppage ~ "].b[6]" }}'
  b7obj: '{{ "p[" ~ hasppage ~ "].b[7]" }}'
  b8obj: '{{ "p[" ~ hasppage ~ "].b[8]" }}'
  b9obj: '{{ "p[" ~ hasppage ~ "].b[9]" }}'
  b10obj: '{{ "p[" ~ hasppage ~ "].b[10]" }}'
  xcen: 1
  ycen: 1
  font: 7


trigger_variables:
  haspdevice: !input haspdevice
  haspname: >-
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^sensor\.") -%}
        {{- entity|regex_replace(find="^sensor\.", replace="", ignorecase=true)|regex_replace(find="_sensor(?:_\d+|)$", replace="", ignorecase=true) -}}
      {%- endif -%}
    {%- endfor -%}
  haspsensor: >-
    {%- for entity in device_entities(haspdevice) -%}
      {%- if entity|regex_search("^sensor\..+_sensor(?:_\d+|)$") -%}
        {{ entity }}
      {%- endif -%}
    {%- endfor -%}
  jsontopic: '{{ "hasp/" ~ haspname ~ "/state/json" }}'
  selectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedforegroundcolor/rgb" }}'
  selectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/selectedbackgroundcolor/rgb" }}'
  unselectedfgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedforegroundcolor/rgb" }}'
  unselectedbgtopic: '{{ "hasp/" ~ haspname ~ "/light/unselectedbackgroundcolor/rgb" }}'

trigger:
  - platform: state
    entity_id: !input mediaplayer
  - platform: template
    value_template: "{{ is_state(haspsensor, 'ON') }}"
  - platform: homeassistant
    event: start
  - platform: mqtt
    topic: "{{jsontopic}}"
  - platform: mqtt
    topic: "{{selectedfgtopic}}"
  - platform: mqtt
    topic: "{{selectedbgtopic}}"
  - platform: mqtt
    topic: "{{unselectedfgtopic}}"
  - platform: mqtt
    topic: "{{unselectedbgtopic}}"

condition:
  - condition: template
    value_template: "{{ is_state(haspsensor, 'ON') }}"

action:
  - choose:
      #########################################################################
      # RUN ACTIONS or Home Assistant Startup or HASP Connect
      # Apply styles and place text
      - conditions:
          - condition: template
            value_template: >- 
              {{-
                (trigger is not defined)
              or
                ((trigger.platform == 'homeassistant') and (trigger.event == 'start'))
              or
                ((trigger.platform == 'template') and (trigger.entity_id == haspsensor) and (trigger.to_state.state == 'ON'))
              -}}
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{jsoncommandtopic}}"
              payload: >-
                ["{{b5obj}}.txt=\"{{button5text}}\"","{{b5obj}}.font={{font}}","{{b5obj}}.xcen={{xcen}}","{{b5obj}}.ycen={{ycen}}","{{b5obj}}.pco={{selectedfg}}","{{b5obj}}.bco={{selectedbg}}","{{b5obj}}.pco2={{unselectedfg}}","{{b5obj}}.bco2={{unselectedbg}}",
                "{{b6obj}}.txt=\"{{button6text}}\"","{{b6obj}}.font={{font}}","{{b6obj}}.xcen={{xcen}}","{{b6obj}}.ycen={{ycen}}","{{b6obj}}.pco={{selectedfg}}","{{b6obj}}.bco={{selectedbg}}", "{{b6obj}}.pco2={{unselectedfg}}","{{b6obj}}.bco2={{unselectedbg}}",
                "{{b7obj}}.txt=\"{{button7text}}\"","{{b7obj}}.font={{font}}","{{b7obj}}.xcen={{xcen}}","{{b7obj}}.ycen={{ycen}}","{{b7obj}}.pco={{selectedfg}}","{{b7obj}}.bco={{selectedbg}}","{{b7obj}}.pco2={{unselectedfg}}","{{b7obj}}.bco2={{unselectedbg}}",
                "{{b8obj}}.txt=\"{{button8text}}\"","{{b8obj}}.font={{font}}","{{b8obj}}.xcen={{xcen}}","{{b8obj}}.ycen={{ycen}}","{{b8obj}}.pco={{selectedfg}}","{{b8obj}}.bco={{selectedbg}}","{{b8obj}}.pco2={{unselectedfg}}","{{b8obj}}.bco2={{unselectedbg}}",
                "{{b9obj}}.txt=\"{{button9text}}\"","{{b9obj}}.font={{font}}","{{b9obj}}.xcen={{xcen}}","{{b9obj}}.ycen={{ycen}}","{{b9obj}}.pco={{selectedfg}}","{{b9obj}}.bco={{selectedbg}}","{{b9obj}}.pco2={{unselectedfg}}","{{b9obj}}.bco2={{unselectedbg}}",
                "{{b10obj}}.txt=\"{{button10text}}\"","{{b10obj}}.font={{font}}","{{b10obj}}.xcen={{xcen}}","{{b10obj}}.ycen={{ycen}}","{{b10obj}}.pco={{selectedfg}}","{{b10obj}}.bco={{selectedbg}}","{{b10obj}}.pco2={{unselectedfg}}","{{b10obj}}.bco2={{unselectedbg}}"]

      #########################################################################
      # Update volume if it has changed state
      - conditions: # volume has changed value
          - condition: template
            value_template: '{{ (trigger.platform == "state") and (trigger.entity_id == mediaplayer) and (trigger.from_state.attributes.volume_level != trigger.to_state.attributes.volume_level)}}'
        sequence:
          - service: mqtt.publish
            data:
              topic: "{{jsoncommandtopic}}"
              payload: '["{{b7obj}}.txt=\"{{button7text}}\""]'

      #########################################################################
      # Handle MQTT message triggers
      - conditions:
          - condition: template
            value_template: '{{ trigger.platform == "mqtt" }}'
        sequence:
          - choose:
              #########################################################################
              # Catch incoming JSON messages
              - conditions:
                  - condition: template
                    value_template: "{{ (trigger.topic == jsontopic) and trigger.payload_json is defined }}"
                sequence:
                  - choose:
                      #########################################################################
                      # Button Up was Pressed
                      - conditions:
                          - condition: template
                            value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == b5obj) and (trigger.payload_json.value == "ON")}}'
                        sequence:
                          - service: media_player.volume_up
                            entity_id: !input mediaplayer
                      #########################################################################
                      # Button Input=Kodi was Pressed
                      - conditions:
                          - condition: template
                            value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == b6obj) and (trigger.payload_json.value == "ON")}}'
                        sequence:
                          - service: media_player.select_source
                            entity_id: !input mediaplayer
                            data:
                              source: "Kodi TV"
                      #########################################################################
                      # Current volume was Pressed
                      - conditions:
                          - condition: template
                            value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == b7obj) and (trigger.payload_json.value == "ON")}}'
                        sequence:
                          - service: media_player.volume_mute
                            entity_id: !input mediaplayer
                      #########################################################################
                      # Button Input=Chromecast was Pressed
                      - conditions:
                          - condition: template
                            value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == b8obj) and (trigger.payload_json.value == "ON")}}'
                        sequence:
                          - service: media_player.select_source
                            entity_id: !input mediaplayer
                            data:
                              source: "Chromecast"
                      #########################################################################
                      # Button Down was Pressed
                      - conditions:
                          - condition: template
                            value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == b9obj) and (trigger.payload_json.value == "ON")}}'
                        sequence:
                          - service: media_player.volume_down
                            entity_id: !input mediaplayer
                      #########################################################################
                      # Button Input=Chromecast was Pressed
                      - conditions:
                          - condition: template
                            value_template: '{{ (trigger.topic == jsontopic) and (trigger.payload_json.event == b10obj) and (trigger.payload_json.value == "ON")}}'
                        sequence:
                          - service: media_player.select_source
                            entity_id: !input mediaplayer
                            data:
                              source: "DVD"

              #########################################################################
              # Theme: Apply selected foreground color when it changes.
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedfgtopic }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        ["{{b5obj}}.pco={{selectedfg}}",
                        "{{b6obj}}.pco={{selectedfg}}",
                        "{{b7obj}}.pco={{selectedfg}}",
                        "{{b8obj}}.pco={{selectedfg}}",
                        "{{b9obj}}.pco={{selectedfg}}",
                        "{{b10obj}}.pco={{selectedfg}}"]
              #########################################################################
              # Theme: Apply selected background color on change
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == selectedbgtopic }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        ["{{b5obj}}.bco={{selectedbg}}",
                        "{{b6obj}}.bco={{selectedbg}}",
                        "{{b7obj}}.bco={{selectedbg}}",
                        "{{b8obj}}.bco={{selectedbg}}",
                        "{{b9obj}}.bco={{selectedbg}}",
                        "{{b10obj}}.bco={{selectedbg}}"]
              #########################################################################
              # Theme: Apply unselected foreground color on change
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedfgtopic }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        ["{{b5obj}}.pco2={{unselectedfg}}",
                        "{{b6obj}}.pco2={{unselectedfg}}",
                        "{{b7obj}}.pco2={{unselectedfg}}",
                        "{{b8obj}}.pco2={{unselectedfg}}",
                        "{{b9obj}}.pco2={{unselectedfg}}",
                        "{{b10obj}}.pco2={{unselectedfg}}"]
              #########################################################################
              # Theme: Apply unselected background color on change
              - conditions:
                  - condition: template
                    value_template: "{{ trigger.topic == unselectedbgtopic }}"
                sequence:
                  - service: mqtt.publish
                    data:
                      topic: "{{jsoncommandtopic}}"
                      payload: >-
                        ["{{b5obj}}.bco2={{unselectedbg}}",
                        "{{b6obj}}.bco2={{unselectedbg}}",
                        "{{b7obj}}.bco2={{unselectedbg}}",
                        "{{b8obj}}.bco2={{unselectedbg}}",
                        "{{b9obj}}.bco2={{unselectedbg}}",
                        "{{b10obj}}.bco2={{unselectedbg}}"]
